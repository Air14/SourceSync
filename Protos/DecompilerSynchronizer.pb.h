// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DecompilerSynchronizer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_DecompilerSynchronizer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_DecompilerSynchronizer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_DecompilerSynchronizer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_DecompilerSynchronizer_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DecompilerSynchronizer_2eproto;
class DecompiledModuleNameReply;
struct DecompiledModuleNameReplyDefaultTypeInternal;
extern DecompiledModuleNameReplyDefaultTypeInternal _DecompiledModuleNameReply_default_instance_;
class EmptyRequestReply;
struct EmptyRequestReplyDefaultTypeInternal;
extern EmptyRequestReplyDefaultTypeInternal _EmptyRequestReply_default_instance_;
class FunctionBoundaries;
struct FunctionBoundariesDefaultTypeInternal;
extern FunctionBoundariesDefaultTypeInternal _FunctionBoundaries_default_instance_;
class GeneratePdbForCallstackReply;
struct GeneratePdbForCallstackReplyDefaultTypeInternal;
extern GeneratePdbForCallstackReplyDefaultTypeInternal _GeneratePdbForCallstackReply_default_instance_;
class GeneratePdbForCallstackRequest;
struct GeneratePdbForCallstackRequestDefaultTypeInternal;
extern GeneratePdbForCallstackRequestDefaultTypeInternal _GeneratePdbForCallstackRequest_default_instance_;
class GetPdbPathReply;
struct GetPdbPathReplyDefaultTypeInternal;
extern GetPdbPathReplyDefaultTypeInternal _GetPdbPathReply_default_instance_;
class ShouldUpdateSymbolsReply;
struct ShouldUpdateSymbolsReplyDefaultTypeInternal;
extern ShouldUpdateSymbolsReplyDefaultTypeInternal _ShouldUpdateSymbolsReply_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::DecompiledModuleNameReply* Arena::CreateMaybeMessage<::DecompiledModuleNameReply>(Arena*);
template<> ::EmptyRequestReply* Arena::CreateMaybeMessage<::EmptyRequestReply>(Arena*);
template<> ::FunctionBoundaries* Arena::CreateMaybeMessage<::FunctionBoundaries>(Arena*);
template<> ::GeneratePdbForCallstackReply* Arena::CreateMaybeMessage<::GeneratePdbForCallstackReply>(Arena*);
template<> ::GeneratePdbForCallstackRequest* Arena::CreateMaybeMessage<::GeneratePdbForCallstackRequest>(Arena*);
template<> ::GetPdbPathReply* Arena::CreateMaybeMessage<::GetPdbPathReply>(Arena*);
template<> ::ShouldUpdateSymbolsReply* Arena::CreateMaybeMessage<::ShouldUpdateSymbolsReply>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class EmptyRequestReply final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:EmptyRequestReply) */ {
 public:
  inline EmptyRequestReply() : EmptyRequestReply(nullptr) {}
  explicit PROTOBUF_CONSTEXPR EmptyRequestReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EmptyRequestReply(const EmptyRequestReply& from);
  EmptyRequestReply(EmptyRequestReply&& from) noexcept
    : EmptyRequestReply() {
    *this = ::std::move(from);
  }

  inline EmptyRequestReply& operator=(const EmptyRequestReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmptyRequestReply& operator=(EmptyRequestReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EmptyRequestReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmptyRequestReply* internal_default_instance() {
    return reinterpret_cast<const EmptyRequestReply*>(
               &_EmptyRequestReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EmptyRequestReply& a, EmptyRequestReply& b) {
    a.Swap(&b);
  }
  inline void Swap(EmptyRequestReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmptyRequestReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmptyRequestReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EmptyRequestReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const EmptyRequestReply& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const EmptyRequestReply& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EmptyRequestReply";
  }
  protected:
  explicit EmptyRequestReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:EmptyRequestReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_DecompilerSynchronizer_2eproto;
};
// -------------------------------------------------------------------

class DecompiledModuleNameReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DecompiledModuleNameReply) */ {
 public:
  inline DecompiledModuleNameReply() : DecompiledModuleNameReply(nullptr) {}
  ~DecompiledModuleNameReply() override;
  explicit PROTOBUF_CONSTEXPR DecompiledModuleNameReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DecompiledModuleNameReply(const DecompiledModuleNameReply& from);
  DecompiledModuleNameReply(DecompiledModuleNameReply&& from) noexcept
    : DecompiledModuleNameReply() {
    *this = ::std::move(from);
  }

  inline DecompiledModuleNameReply& operator=(const DecompiledModuleNameReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline DecompiledModuleNameReply& operator=(DecompiledModuleNameReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DecompiledModuleNameReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const DecompiledModuleNameReply* internal_default_instance() {
    return reinterpret_cast<const DecompiledModuleNameReply*>(
               &_DecompiledModuleNameReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DecompiledModuleNameReply& a, DecompiledModuleNameReply& b) {
    a.Swap(&b);
  }
  inline void Swap(DecompiledModuleNameReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DecompiledModuleNameReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DecompiledModuleNameReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DecompiledModuleNameReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DecompiledModuleNameReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DecompiledModuleNameReply& from) {
    DecompiledModuleNameReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DecompiledModuleNameReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DecompiledModuleNameReply";
  }
  protected:
  explicit DecompiledModuleNameReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModuleNameFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string ModuleName = 2;
  void clear_modulename();
  const std::string& modulename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_modulename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_modulename();
  PROTOBUF_NODISCARD std::string* release_modulename();
  void set_allocated_modulename(std::string* modulename);
  private:
  const std::string& _internal_modulename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_modulename(const std::string& value);
  std::string* _internal_mutable_modulename();
  public:

  // bool Status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:DecompiledModuleNameReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modulename_;
    bool status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_DecompilerSynchronizer_2eproto;
};
// -------------------------------------------------------------------

class FunctionBoundaries final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FunctionBoundaries) */ {
 public:
  inline FunctionBoundaries() : FunctionBoundaries(nullptr) {}
  ~FunctionBoundaries() override;
  explicit PROTOBUF_CONSTEXPR FunctionBoundaries(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FunctionBoundaries(const FunctionBoundaries& from);
  FunctionBoundaries(FunctionBoundaries&& from) noexcept
    : FunctionBoundaries() {
    *this = ::std::move(from);
  }

  inline FunctionBoundaries& operator=(const FunctionBoundaries& from) {
    CopyFrom(from);
    return *this;
  }
  inline FunctionBoundaries& operator=(FunctionBoundaries&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FunctionBoundaries& default_instance() {
    return *internal_default_instance();
  }
  static inline const FunctionBoundaries* internal_default_instance() {
    return reinterpret_cast<const FunctionBoundaries*>(
               &_FunctionBoundaries_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FunctionBoundaries& a, FunctionBoundaries& b) {
    a.Swap(&b);
  }
  inline void Swap(FunctionBoundaries* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FunctionBoundaries* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FunctionBoundaries* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FunctionBoundaries>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FunctionBoundaries& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FunctionBoundaries& from) {
    FunctionBoundaries::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FunctionBoundaries* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FunctionBoundaries";
  }
  protected:
  explicit FunctionBoundaries(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartOfFunctionRvaFieldNumber = 1,
    kEndOfFunctionRvaFieldNumber = 2,
  };
  // uint64 StartOfFunctionRva = 1;
  void clear_startoffunctionrva();
  uint64_t startoffunctionrva() const;
  void set_startoffunctionrva(uint64_t value);
  private:
  uint64_t _internal_startoffunctionrva() const;
  void _internal_set_startoffunctionrva(uint64_t value);
  public:

  // uint64 EndOfFunctionRva = 2;
  void clear_endoffunctionrva();
  uint64_t endoffunctionrva() const;
  void set_endoffunctionrva(uint64_t value);
  private:
  uint64_t _internal_endoffunctionrva() const;
  void _internal_set_endoffunctionrva(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:FunctionBoundaries)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t startoffunctionrva_;
    uint64_t endoffunctionrva_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_DecompilerSynchronizer_2eproto;
};
// -------------------------------------------------------------------

class GeneratePdbForCallstackRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GeneratePdbForCallstackRequest) */ {
 public:
  inline GeneratePdbForCallstackRequest() : GeneratePdbForCallstackRequest(nullptr) {}
  ~GeneratePdbForCallstackRequest() override;
  explicit PROTOBUF_CONSTEXPR GeneratePdbForCallstackRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GeneratePdbForCallstackRequest(const GeneratePdbForCallstackRequest& from);
  GeneratePdbForCallstackRequest(GeneratePdbForCallstackRequest&& from) noexcept
    : GeneratePdbForCallstackRequest() {
    *this = ::std::move(from);
  }

  inline GeneratePdbForCallstackRequest& operator=(const GeneratePdbForCallstackRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeneratePdbForCallstackRequest& operator=(GeneratePdbForCallstackRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GeneratePdbForCallstackRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GeneratePdbForCallstackRequest* internal_default_instance() {
    return reinterpret_cast<const GeneratePdbForCallstackRequest*>(
               &_GeneratePdbForCallstackRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GeneratePdbForCallstackRequest& a, GeneratePdbForCallstackRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GeneratePdbForCallstackRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GeneratePdbForCallstackRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GeneratePdbForCallstackRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GeneratePdbForCallstackRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GeneratePdbForCallstackRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GeneratePdbForCallstackRequest& from) {
    GeneratePdbForCallstackRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeneratePdbForCallstackRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GeneratePdbForCallstackRequest";
  }
  protected:
  explicit GeneratePdbForCallstackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFunctionsRvaFieldNumber = 1,
  };
  // repeated uint64 FunctionsRva = 1;
  int functionsrva_size() const;
  private:
  int _internal_functionsrva_size() const;
  public:
  void clear_functionsrva();
  private:
  uint64_t _internal_functionsrva(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_functionsrva() const;
  void _internal_add_functionsrva(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_functionsrva();
  public:
  uint64_t functionsrva(int index) const;
  void set_functionsrva(int index, uint64_t value);
  void add_functionsrva(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      functionsrva() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_functionsrva();

  // @@protoc_insertion_point(class_scope:GeneratePdbForCallstackRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > functionsrva_;
    mutable std::atomic<int> _functionsrva_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_DecompilerSynchronizer_2eproto;
};
// -------------------------------------------------------------------

class GeneratePdbForCallstackReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GeneratePdbForCallstackReply) */ {
 public:
  inline GeneratePdbForCallstackReply() : GeneratePdbForCallstackReply(nullptr) {}
  ~GeneratePdbForCallstackReply() override;
  explicit PROTOBUF_CONSTEXPR GeneratePdbForCallstackReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GeneratePdbForCallstackReply(const GeneratePdbForCallstackReply& from);
  GeneratePdbForCallstackReply(GeneratePdbForCallstackReply&& from) noexcept
    : GeneratePdbForCallstackReply() {
    *this = ::std::move(from);
  }

  inline GeneratePdbForCallstackReply& operator=(const GeneratePdbForCallstackReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeneratePdbForCallstackReply& operator=(GeneratePdbForCallstackReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GeneratePdbForCallstackReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const GeneratePdbForCallstackReply* internal_default_instance() {
    return reinterpret_cast<const GeneratePdbForCallstackReply*>(
               &_GeneratePdbForCallstackReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GeneratePdbForCallstackReply& a, GeneratePdbForCallstackReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GeneratePdbForCallstackReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GeneratePdbForCallstackReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GeneratePdbForCallstackReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GeneratePdbForCallstackReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GeneratePdbForCallstackReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GeneratePdbForCallstackReply& from) {
    GeneratePdbForCallstackReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeneratePdbForCallstackReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GeneratePdbForCallstackReply";
  }
  protected:
  explicit GeneratePdbForCallstackReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFunctionsBoundariesFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .FunctionBoundaries FunctionsBoundaries = 2;
  int functionsboundaries_size() const;
  private:
  int _internal_functionsboundaries_size() const;
  public:
  void clear_functionsboundaries();
  ::FunctionBoundaries* mutable_functionsboundaries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FunctionBoundaries >*
      mutable_functionsboundaries();
  private:
  const ::FunctionBoundaries& _internal_functionsboundaries(int index) const;
  ::FunctionBoundaries* _internal_add_functionsboundaries();
  public:
  const ::FunctionBoundaries& functionsboundaries(int index) const;
  ::FunctionBoundaries* add_functionsboundaries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FunctionBoundaries >&
      functionsboundaries() const;

  // bool Status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:GeneratePdbForCallstackReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FunctionBoundaries > functionsboundaries_;
    bool status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_DecompilerSynchronizer_2eproto;
};
// -------------------------------------------------------------------

class GetPdbPathReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetPdbPathReply) */ {
 public:
  inline GetPdbPathReply() : GetPdbPathReply(nullptr) {}
  ~GetPdbPathReply() override;
  explicit PROTOBUF_CONSTEXPR GetPdbPathReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPdbPathReply(const GetPdbPathReply& from);
  GetPdbPathReply(GetPdbPathReply&& from) noexcept
    : GetPdbPathReply() {
    *this = ::std::move(from);
  }

  inline GetPdbPathReply& operator=(const GetPdbPathReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPdbPathReply& operator=(GetPdbPathReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPdbPathReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPdbPathReply* internal_default_instance() {
    return reinterpret_cast<const GetPdbPathReply*>(
               &_GetPdbPathReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetPdbPathReply& a, GetPdbPathReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPdbPathReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPdbPathReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPdbPathReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPdbPathReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPdbPathReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetPdbPathReply& from) {
    GetPdbPathReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPdbPathReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetPdbPathReply";
  }
  protected:
  explicit GetPdbPathReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPdbPathFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string PdbPath = 2;
  void clear_pdbpath();
  const std::string& pdbpath() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pdbpath(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pdbpath();
  PROTOBUF_NODISCARD std::string* release_pdbpath();
  void set_allocated_pdbpath(std::string* pdbpath);
  private:
  const std::string& _internal_pdbpath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pdbpath(const std::string& value);
  std::string* _internal_mutable_pdbpath();
  public:

  // bool Status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:GetPdbPathReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pdbpath_;
    bool status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_DecompilerSynchronizer_2eproto;
};
// -------------------------------------------------------------------

class ShouldUpdateSymbolsReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ShouldUpdateSymbolsReply) */ {
 public:
  inline ShouldUpdateSymbolsReply() : ShouldUpdateSymbolsReply(nullptr) {}
  ~ShouldUpdateSymbolsReply() override;
  explicit PROTOBUF_CONSTEXPR ShouldUpdateSymbolsReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShouldUpdateSymbolsReply(const ShouldUpdateSymbolsReply& from);
  ShouldUpdateSymbolsReply(ShouldUpdateSymbolsReply&& from) noexcept
    : ShouldUpdateSymbolsReply() {
    *this = ::std::move(from);
  }

  inline ShouldUpdateSymbolsReply& operator=(const ShouldUpdateSymbolsReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShouldUpdateSymbolsReply& operator=(ShouldUpdateSymbolsReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShouldUpdateSymbolsReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShouldUpdateSymbolsReply* internal_default_instance() {
    return reinterpret_cast<const ShouldUpdateSymbolsReply*>(
               &_ShouldUpdateSymbolsReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ShouldUpdateSymbolsReply& a, ShouldUpdateSymbolsReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ShouldUpdateSymbolsReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShouldUpdateSymbolsReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShouldUpdateSymbolsReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShouldUpdateSymbolsReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShouldUpdateSymbolsReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ShouldUpdateSymbolsReply& from) {
    ShouldUpdateSymbolsReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShouldUpdateSymbolsReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ShouldUpdateSymbolsReply";
  }
  protected:
  explicit ShouldUpdateSymbolsReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool Status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ShouldUpdateSymbolsReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_DecompilerSynchronizer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EmptyRequestReply

// -------------------------------------------------------------------

// DecompiledModuleNameReply

// bool Status = 1;
inline void DecompiledModuleNameReply::clear_status() {
  _impl_.status_ = false;
}
inline bool DecompiledModuleNameReply::_internal_status() const {
  return _impl_.status_;
}
inline bool DecompiledModuleNameReply::status() const {
  // @@protoc_insertion_point(field_get:DecompiledModuleNameReply.Status)
  return _internal_status();
}
inline void DecompiledModuleNameReply::_internal_set_status(bool value) {
  
  _impl_.status_ = value;
}
inline void DecompiledModuleNameReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:DecompiledModuleNameReply.Status)
}

// string ModuleName = 2;
inline void DecompiledModuleNameReply::clear_modulename() {
  _impl_.modulename_.ClearToEmpty();
}
inline const std::string& DecompiledModuleNameReply::modulename() const {
  // @@protoc_insertion_point(field_get:DecompiledModuleNameReply.ModuleName)
  return _internal_modulename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DecompiledModuleNameReply::set_modulename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.modulename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:DecompiledModuleNameReply.ModuleName)
}
inline std::string* DecompiledModuleNameReply::mutable_modulename() {
  std::string* _s = _internal_mutable_modulename();
  // @@protoc_insertion_point(field_mutable:DecompiledModuleNameReply.ModuleName)
  return _s;
}
inline const std::string& DecompiledModuleNameReply::_internal_modulename() const {
  return _impl_.modulename_.Get();
}
inline void DecompiledModuleNameReply::_internal_set_modulename(const std::string& value) {
  
  _impl_.modulename_.Set(value, GetArenaForAllocation());
}
inline std::string* DecompiledModuleNameReply::_internal_mutable_modulename() {
  
  return _impl_.modulename_.Mutable(GetArenaForAllocation());
}
inline std::string* DecompiledModuleNameReply::release_modulename() {
  // @@protoc_insertion_point(field_release:DecompiledModuleNameReply.ModuleName)
  return _impl_.modulename_.Release();
}
inline void DecompiledModuleNameReply::set_allocated_modulename(std::string* modulename) {
  if (modulename != nullptr) {
    
  } else {
    
  }
  _impl_.modulename_.SetAllocated(modulename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.modulename_.IsDefault()) {
    _impl_.modulename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:DecompiledModuleNameReply.ModuleName)
}

// -------------------------------------------------------------------

// FunctionBoundaries

// uint64 StartOfFunctionRva = 1;
inline void FunctionBoundaries::clear_startoffunctionrva() {
  _impl_.startoffunctionrva_ = uint64_t{0u};
}
inline uint64_t FunctionBoundaries::_internal_startoffunctionrva() const {
  return _impl_.startoffunctionrva_;
}
inline uint64_t FunctionBoundaries::startoffunctionrva() const {
  // @@protoc_insertion_point(field_get:FunctionBoundaries.StartOfFunctionRva)
  return _internal_startoffunctionrva();
}
inline void FunctionBoundaries::_internal_set_startoffunctionrva(uint64_t value) {
  
  _impl_.startoffunctionrva_ = value;
}
inline void FunctionBoundaries::set_startoffunctionrva(uint64_t value) {
  _internal_set_startoffunctionrva(value);
  // @@protoc_insertion_point(field_set:FunctionBoundaries.StartOfFunctionRva)
}

// uint64 EndOfFunctionRva = 2;
inline void FunctionBoundaries::clear_endoffunctionrva() {
  _impl_.endoffunctionrva_ = uint64_t{0u};
}
inline uint64_t FunctionBoundaries::_internal_endoffunctionrva() const {
  return _impl_.endoffunctionrva_;
}
inline uint64_t FunctionBoundaries::endoffunctionrva() const {
  // @@protoc_insertion_point(field_get:FunctionBoundaries.EndOfFunctionRva)
  return _internal_endoffunctionrva();
}
inline void FunctionBoundaries::_internal_set_endoffunctionrva(uint64_t value) {
  
  _impl_.endoffunctionrva_ = value;
}
inline void FunctionBoundaries::set_endoffunctionrva(uint64_t value) {
  _internal_set_endoffunctionrva(value);
  // @@protoc_insertion_point(field_set:FunctionBoundaries.EndOfFunctionRva)
}

// -------------------------------------------------------------------

// GeneratePdbForCallstackRequest

// repeated uint64 FunctionsRva = 1;
inline int GeneratePdbForCallstackRequest::_internal_functionsrva_size() const {
  return _impl_.functionsrva_.size();
}
inline int GeneratePdbForCallstackRequest::functionsrva_size() const {
  return _internal_functionsrva_size();
}
inline void GeneratePdbForCallstackRequest::clear_functionsrva() {
  _impl_.functionsrva_.Clear();
}
inline uint64_t GeneratePdbForCallstackRequest::_internal_functionsrva(int index) const {
  return _impl_.functionsrva_.Get(index);
}
inline uint64_t GeneratePdbForCallstackRequest::functionsrva(int index) const {
  // @@protoc_insertion_point(field_get:GeneratePdbForCallstackRequest.FunctionsRva)
  return _internal_functionsrva(index);
}
inline void GeneratePdbForCallstackRequest::set_functionsrva(int index, uint64_t value) {
  _impl_.functionsrva_.Set(index, value);
  // @@protoc_insertion_point(field_set:GeneratePdbForCallstackRequest.FunctionsRva)
}
inline void GeneratePdbForCallstackRequest::_internal_add_functionsrva(uint64_t value) {
  _impl_.functionsrva_.Add(value);
}
inline void GeneratePdbForCallstackRequest::add_functionsrva(uint64_t value) {
  _internal_add_functionsrva(value);
  // @@protoc_insertion_point(field_add:GeneratePdbForCallstackRequest.FunctionsRva)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
GeneratePdbForCallstackRequest::_internal_functionsrva() const {
  return _impl_.functionsrva_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
GeneratePdbForCallstackRequest::functionsrva() const {
  // @@protoc_insertion_point(field_list:GeneratePdbForCallstackRequest.FunctionsRva)
  return _internal_functionsrva();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
GeneratePdbForCallstackRequest::_internal_mutable_functionsrva() {
  return &_impl_.functionsrva_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
GeneratePdbForCallstackRequest::mutable_functionsrva() {
  // @@protoc_insertion_point(field_mutable_list:GeneratePdbForCallstackRequest.FunctionsRva)
  return _internal_mutable_functionsrva();
}

// -------------------------------------------------------------------

// GeneratePdbForCallstackReply

// bool Status = 1;
inline void GeneratePdbForCallstackReply::clear_status() {
  _impl_.status_ = false;
}
inline bool GeneratePdbForCallstackReply::_internal_status() const {
  return _impl_.status_;
}
inline bool GeneratePdbForCallstackReply::status() const {
  // @@protoc_insertion_point(field_get:GeneratePdbForCallstackReply.Status)
  return _internal_status();
}
inline void GeneratePdbForCallstackReply::_internal_set_status(bool value) {
  
  _impl_.status_ = value;
}
inline void GeneratePdbForCallstackReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:GeneratePdbForCallstackReply.Status)
}

// repeated .FunctionBoundaries FunctionsBoundaries = 2;
inline int GeneratePdbForCallstackReply::_internal_functionsboundaries_size() const {
  return _impl_.functionsboundaries_.size();
}
inline int GeneratePdbForCallstackReply::functionsboundaries_size() const {
  return _internal_functionsboundaries_size();
}
inline void GeneratePdbForCallstackReply::clear_functionsboundaries() {
  _impl_.functionsboundaries_.Clear();
}
inline ::FunctionBoundaries* GeneratePdbForCallstackReply::mutable_functionsboundaries(int index) {
  // @@protoc_insertion_point(field_mutable:GeneratePdbForCallstackReply.FunctionsBoundaries)
  return _impl_.functionsboundaries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FunctionBoundaries >*
GeneratePdbForCallstackReply::mutable_functionsboundaries() {
  // @@protoc_insertion_point(field_mutable_list:GeneratePdbForCallstackReply.FunctionsBoundaries)
  return &_impl_.functionsboundaries_;
}
inline const ::FunctionBoundaries& GeneratePdbForCallstackReply::_internal_functionsboundaries(int index) const {
  return _impl_.functionsboundaries_.Get(index);
}
inline const ::FunctionBoundaries& GeneratePdbForCallstackReply::functionsboundaries(int index) const {
  // @@protoc_insertion_point(field_get:GeneratePdbForCallstackReply.FunctionsBoundaries)
  return _internal_functionsboundaries(index);
}
inline ::FunctionBoundaries* GeneratePdbForCallstackReply::_internal_add_functionsboundaries() {
  return _impl_.functionsboundaries_.Add();
}
inline ::FunctionBoundaries* GeneratePdbForCallstackReply::add_functionsboundaries() {
  ::FunctionBoundaries* _add = _internal_add_functionsboundaries();
  // @@protoc_insertion_point(field_add:GeneratePdbForCallstackReply.FunctionsBoundaries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::FunctionBoundaries >&
GeneratePdbForCallstackReply::functionsboundaries() const {
  // @@protoc_insertion_point(field_list:GeneratePdbForCallstackReply.FunctionsBoundaries)
  return _impl_.functionsboundaries_;
}

// -------------------------------------------------------------------

// GetPdbPathReply

// bool Status = 1;
inline void GetPdbPathReply::clear_status() {
  _impl_.status_ = false;
}
inline bool GetPdbPathReply::_internal_status() const {
  return _impl_.status_;
}
inline bool GetPdbPathReply::status() const {
  // @@protoc_insertion_point(field_get:GetPdbPathReply.Status)
  return _internal_status();
}
inline void GetPdbPathReply::_internal_set_status(bool value) {
  
  _impl_.status_ = value;
}
inline void GetPdbPathReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:GetPdbPathReply.Status)
}

// string PdbPath = 2;
inline void GetPdbPathReply::clear_pdbpath() {
  _impl_.pdbpath_.ClearToEmpty();
}
inline const std::string& GetPdbPathReply::pdbpath() const {
  // @@protoc_insertion_point(field_get:GetPdbPathReply.PdbPath)
  return _internal_pdbpath();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPdbPathReply::set_pdbpath(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pdbpath_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GetPdbPathReply.PdbPath)
}
inline std::string* GetPdbPathReply::mutable_pdbpath() {
  std::string* _s = _internal_mutable_pdbpath();
  // @@protoc_insertion_point(field_mutable:GetPdbPathReply.PdbPath)
  return _s;
}
inline const std::string& GetPdbPathReply::_internal_pdbpath() const {
  return _impl_.pdbpath_.Get();
}
inline void GetPdbPathReply::_internal_set_pdbpath(const std::string& value) {
  
  _impl_.pdbpath_.Set(value, GetArenaForAllocation());
}
inline std::string* GetPdbPathReply::_internal_mutable_pdbpath() {
  
  return _impl_.pdbpath_.Mutable(GetArenaForAllocation());
}
inline std::string* GetPdbPathReply::release_pdbpath() {
  // @@protoc_insertion_point(field_release:GetPdbPathReply.PdbPath)
  return _impl_.pdbpath_.Release();
}
inline void GetPdbPathReply::set_allocated_pdbpath(std::string* pdbpath) {
  if (pdbpath != nullptr) {
    
  } else {
    
  }
  _impl_.pdbpath_.SetAllocated(pdbpath, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pdbpath_.IsDefault()) {
    _impl_.pdbpath_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GetPdbPathReply.PdbPath)
}

// -------------------------------------------------------------------

// ShouldUpdateSymbolsReply

// bool Status = 1;
inline void ShouldUpdateSymbolsReply::clear_status() {
  _impl_.status_ = false;
}
inline bool ShouldUpdateSymbolsReply::_internal_status() const {
  return _impl_.status_;
}
inline bool ShouldUpdateSymbolsReply::status() const {
  // @@protoc_insertion_point(field_get:ShouldUpdateSymbolsReply.Status)
  return _internal_status();
}
inline void ShouldUpdateSymbolsReply::_internal_set_status(bool value) {
  
  _impl_.status_ = value;
}
inline void ShouldUpdateSymbolsReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:ShouldUpdateSymbolsReply.Status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_DecompilerSynchronizer_2eproto
