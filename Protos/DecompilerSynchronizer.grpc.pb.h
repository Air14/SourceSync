// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: DecompilerSynchronizer.proto
#ifndef GRPC_DecompilerSynchronizer_2eproto__INCLUDED
#define GRPC_DecompilerSynchronizer_2eproto__INCLUDED

#include "DecompilerSynchronizer.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

class DecompilerSynchronizer final {
 public:
  static constexpr char const* service_full_name() {
    return "DecompilerSynchronizer";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Initialize(::grpc::ClientContext* context, const ::EmptyRequestReply& request, ::EmptyRequestReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EmptyRequestReply>> AsyncInitialize(::grpc::ClientContext* context, const ::EmptyRequestReply& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EmptyRequestReply>>(AsyncInitializeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EmptyRequestReply>> PrepareAsyncInitialize(::grpc::ClientContext* context, const ::EmptyRequestReply& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EmptyRequestReply>>(PrepareAsyncInitializeRaw(context, request, cq));
    }
    virtual ::grpc::Status GetDecompiledModuleName(::grpc::ClientContext* context, const ::EmptyRequestReply& request, ::DecompiledModuleNameReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DecompiledModuleNameReply>> AsyncGetDecompiledModuleName(::grpc::ClientContext* context, const ::EmptyRequestReply& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DecompiledModuleNameReply>>(AsyncGetDecompiledModuleNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DecompiledModuleNameReply>> PrepareAsyncGetDecompiledModuleName(::grpc::ClientContext* context, const ::EmptyRequestReply& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::DecompiledModuleNameReply>>(PrepareAsyncGetDecompiledModuleNameRaw(context, request, cq));
    }
    virtual ::grpc::Status GeneratePdbForCallstack(::grpc::ClientContext* context, const ::GeneratePdbForCallstackRequest& request, ::GeneratePdbForCallstackReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GeneratePdbForCallstackReply>> AsyncGeneratePdbForCallstack(::grpc::ClientContext* context, const ::GeneratePdbForCallstackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GeneratePdbForCallstackReply>>(AsyncGeneratePdbForCallstackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GeneratePdbForCallstackReply>> PrepareAsyncGeneratePdbForCallstack(::grpc::ClientContext* context, const ::GeneratePdbForCallstackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GeneratePdbForCallstackReply>>(PrepareAsyncGeneratePdbForCallstackRaw(context, request, cq));
    }
    virtual ::grpc::Status GetPdbPath(::grpc::ClientContext* context, const ::EmptyRequestReply& request, ::GetPdbPathReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetPdbPathReply>> AsyncGetPdbPath(::grpc::ClientContext* context, const ::EmptyRequestReply& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetPdbPathReply>>(AsyncGetPdbPathRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetPdbPathReply>> PrepareAsyncGetPdbPath(::grpc::ClientContext* context, const ::EmptyRequestReply& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::GetPdbPathReply>>(PrepareAsyncGetPdbPathRaw(context, request, cq));
    }
    virtual ::grpc::Status ShouldUpdateSymbols(::grpc::ClientContext* context, const ::EmptyRequestReply& request, ::ShouldUpdateSymbolsReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ShouldUpdateSymbolsReply>> AsyncShouldUpdateSymbols(::grpc::ClientContext* context, const ::EmptyRequestReply& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ShouldUpdateSymbolsReply>>(AsyncShouldUpdateSymbolsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ShouldUpdateSymbolsReply>> PrepareAsyncShouldUpdateSymbols(::grpc::ClientContext* context, const ::EmptyRequestReply& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ShouldUpdateSymbolsReply>>(PrepareAsyncShouldUpdateSymbolsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Initialize(::grpc::ClientContext* context, const ::EmptyRequestReply* request, ::EmptyRequestReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Initialize(::grpc::ClientContext* context, const ::EmptyRequestReply* request, ::EmptyRequestReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetDecompiledModuleName(::grpc::ClientContext* context, const ::EmptyRequestReply* request, ::DecompiledModuleNameReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDecompiledModuleName(::grpc::ClientContext* context, const ::EmptyRequestReply* request, ::DecompiledModuleNameReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GeneratePdbForCallstack(::grpc::ClientContext* context, const ::GeneratePdbForCallstackRequest* request, ::GeneratePdbForCallstackReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GeneratePdbForCallstack(::grpc::ClientContext* context, const ::GeneratePdbForCallstackRequest* request, ::GeneratePdbForCallstackReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetPdbPath(::grpc::ClientContext* context, const ::EmptyRequestReply* request, ::GetPdbPathReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPdbPath(::grpc::ClientContext* context, const ::EmptyRequestReply* request, ::GetPdbPathReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ShouldUpdateSymbols(::grpc::ClientContext* context, const ::EmptyRequestReply* request, ::ShouldUpdateSymbolsReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ShouldUpdateSymbols(::grpc::ClientContext* context, const ::EmptyRequestReply* request, ::ShouldUpdateSymbolsReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::EmptyRequestReply>* AsyncInitializeRaw(::grpc::ClientContext* context, const ::EmptyRequestReply& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::EmptyRequestReply>* PrepareAsyncInitializeRaw(::grpc::ClientContext* context, const ::EmptyRequestReply& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DecompiledModuleNameReply>* AsyncGetDecompiledModuleNameRaw(::grpc::ClientContext* context, const ::EmptyRequestReply& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::DecompiledModuleNameReply>* PrepareAsyncGetDecompiledModuleNameRaw(::grpc::ClientContext* context, const ::EmptyRequestReply& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GeneratePdbForCallstackReply>* AsyncGeneratePdbForCallstackRaw(::grpc::ClientContext* context, const ::GeneratePdbForCallstackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GeneratePdbForCallstackReply>* PrepareAsyncGeneratePdbForCallstackRaw(::grpc::ClientContext* context, const ::GeneratePdbForCallstackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetPdbPathReply>* AsyncGetPdbPathRaw(::grpc::ClientContext* context, const ::EmptyRequestReply& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::GetPdbPathReply>* PrepareAsyncGetPdbPathRaw(::grpc::ClientContext* context, const ::EmptyRequestReply& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ShouldUpdateSymbolsReply>* AsyncShouldUpdateSymbolsRaw(::grpc::ClientContext* context, const ::EmptyRequestReply& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ShouldUpdateSymbolsReply>* PrepareAsyncShouldUpdateSymbolsRaw(::grpc::ClientContext* context, const ::EmptyRequestReply& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Initialize(::grpc::ClientContext* context, const ::EmptyRequestReply& request, ::EmptyRequestReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EmptyRequestReply>> AsyncInitialize(::grpc::ClientContext* context, const ::EmptyRequestReply& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EmptyRequestReply>>(AsyncInitializeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EmptyRequestReply>> PrepareAsyncInitialize(::grpc::ClientContext* context, const ::EmptyRequestReply& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EmptyRequestReply>>(PrepareAsyncInitializeRaw(context, request, cq));
    }
    ::grpc::Status GetDecompiledModuleName(::grpc::ClientContext* context, const ::EmptyRequestReply& request, ::DecompiledModuleNameReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DecompiledModuleNameReply>> AsyncGetDecompiledModuleName(::grpc::ClientContext* context, const ::EmptyRequestReply& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DecompiledModuleNameReply>>(AsyncGetDecompiledModuleNameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DecompiledModuleNameReply>> PrepareAsyncGetDecompiledModuleName(::grpc::ClientContext* context, const ::EmptyRequestReply& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::DecompiledModuleNameReply>>(PrepareAsyncGetDecompiledModuleNameRaw(context, request, cq));
    }
    ::grpc::Status GeneratePdbForCallstack(::grpc::ClientContext* context, const ::GeneratePdbForCallstackRequest& request, ::GeneratePdbForCallstackReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GeneratePdbForCallstackReply>> AsyncGeneratePdbForCallstack(::grpc::ClientContext* context, const ::GeneratePdbForCallstackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GeneratePdbForCallstackReply>>(AsyncGeneratePdbForCallstackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GeneratePdbForCallstackReply>> PrepareAsyncGeneratePdbForCallstack(::grpc::ClientContext* context, const ::GeneratePdbForCallstackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GeneratePdbForCallstackReply>>(PrepareAsyncGeneratePdbForCallstackRaw(context, request, cq));
    }
    ::grpc::Status GetPdbPath(::grpc::ClientContext* context, const ::EmptyRequestReply& request, ::GetPdbPathReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetPdbPathReply>> AsyncGetPdbPath(::grpc::ClientContext* context, const ::EmptyRequestReply& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetPdbPathReply>>(AsyncGetPdbPathRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetPdbPathReply>> PrepareAsyncGetPdbPath(::grpc::ClientContext* context, const ::EmptyRequestReply& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::GetPdbPathReply>>(PrepareAsyncGetPdbPathRaw(context, request, cq));
    }
    ::grpc::Status ShouldUpdateSymbols(::grpc::ClientContext* context, const ::EmptyRequestReply& request, ::ShouldUpdateSymbolsReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ShouldUpdateSymbolsReply>> AsyncShouldUpdateSymbols(::grpc::ClientContext* context, const ::EmptyRequestReply& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ShouldUpdateSymbolsReply>>(AsyncShouldUpdateSymbolsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ShouldUpdateSymbolsReply>> PrepareAsyncShouldUpdateSymbols(::grpc::ClientContext* context, const ::EmptyRequestReply& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ShouldUpdateSymbolsReply>>(PrepareAsyncShouldUpdateSymbolsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Initialize(::grpc::ClientContext* context, const ::EmptyRequestReply* request, ::EmptyRequestReply* response, std::function<void(::grpc::Status)>) override;
      void Initialize(::grpc::ClientContext* context, const ::EmptyRequestReply* request, ::EmptyRequestReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetDecompiledModuleName(::grpc::ClientContext* context, const ::EmptyRequestReply* request, ::DecompiledModuleNameReply* response, std::function<void(::grpc::Status)>) override;
      void GetDecompiledModuleName(::grpc::ClientContext* context, const ::EmptyRequestReply* request, ::DecompiledModuleNameReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GeneratePdbForCallstack(::grpc::ClientContext* context, const ::GeneratePdbForCallstackRequest* request, ::GeneratePdbForCallstackReply* response, std::function<void(::grpc::Status)>) override;
      void GeneratePdbForCallstack(::grpc::ClientContext* context, const ::GeneratePdbForCallstackRequest* request, ::GeneratePdbForCallstackReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetPdbPath(::grpc::ClientContext* context, const ::EmptyRequestReply* request, ::GetPdbPathReply* response, std::function<void(::grpc::Status)>) override;
      void GetPdbPath(::grpc::ClientContext* context, const ::EmptyRequestReply* request, ::GetPdbPathReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ShouldUpdateSymbols(::grpc::ClientContext* context, const ::EmptyRequestReply* request, ::ShouldUpdateSymbolsReply* response, std::function<void(::grpc::Status)>) override;
      void ShouldUpdateSymbols(::grpc::ClientContext* context, const ::EmptyRequestReply* request, ::ShouldUpdateSymbolsReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::EmptyRequestReply>* AsyncInitializeRaw(::grpc::ClientContext* context, const ::EmptyRequestReply& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::EmptyRequestReply>* PrepareAsyncInitializeRaw(::grpc::ClientContext* context, const ::EmptyRequestReply& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DecompiledModuleNameReply>* AsyncGetDecompiledModuleNameRaw(::grpc::ClientContext* context, const ::EmptyRequestReply& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::DecompiledModuleNameReply>* PrepareAsyncGetDecompiledModuleNameRaw(::grpc::ClientContext* context, const ::EmptyRequestReply& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GeneratePdbForCallstackReply>* AsyncGeneratePdbForCallstackRaw(::grpc::ClientContext* context, const ::GeneratePdbForCallstackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GeneratePdbForCallstackReply>* PrepareAsyncGeneratePdbForCallstackRaw(::grpc::ClientContext* context, const ::GeneratePdbForCallstackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GetPdbPathReply>* AsyncGetPdbPathRaw(::grpc::ClientContext* context, const ::EmptyRequestReply& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::GetPdbPathReply>* PrepareAsyncGetPdbPathRaw(::grpc::ClientContext* context, const ::EmptyRequestReply& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ShouldUpdateSymbolsReply>* AsyncShouldUpdateSymbolsRaw(::grpc::ClientContext* context, const ::EmptyRequestReply& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ShouldUpdateSymbolsReply>* PrepareAsyncShouldUpdateSymbolsRaw(::grpc::ClientContext* context, const ::EmptyRequestReply& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Initialize_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDecompiledModuleName_;
    const ::grpc::internal::RpcMethod rpcmethod_GeneratePdbForCallstack_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPdbPath_;
    const ::grpc::internal::RpcMethod rpcmethod_ShouldUpdateSymbols_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Initialize(::grpc::ServerContext* context, const ::EmptyRequestReply* request, ::EmptyRequestReply* response);
    virtual ::grpc::Status GetDecompiledModuleName(::grpc::ServerContext* context, const ::EmptyRequestReply* request, ::DecompiledModuleNameReply* response);
    virtual ::grpc::Status GeneratePdbForCallstack(::grpc::ServerContext* context, const ::GeneratePdbForCallstackRequest* request, ::GeneratePdbForCallstackReply* response);
    virtual ::grpc::Status GetPdbPath(::grpc::ServerContext* context, const ::EmptyRequestReply* request, ::GetPdbPathReply* response);
    virtual ::grpc::Status ShouldUpdateSymbols(::grpc::ServerContext* context, const ::EmptyRequestReply* request, ::ShouldUpdateSymbolsReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Initialize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Initialize() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Initialize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Initialize(::grpc::ServerContext* /*context*/, const ::EmptyRequestReply* /*request*/, ::EmptyRequestReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInitialize(::grpc::ServerContext* context, ::EmptyRequestReply* request, ::grpc::ServerAsyncResponseWriter< ::EmptyRequestReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDecompiledModuleName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDecompiledModuleName() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetDecompiledModuleName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDecompiledModuleName(::grpc::ServerContext* /*context*/, const ::EmptyRequestReply* /*request*/, ::DecompiledModuleNameReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDecompiledModuleName(::grpc::ServerContext* context, ::EmptyRequestReply* request, ::grpc::ServerAsyncResponseWriter< ::DecompiledModuleNameReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GeneratePdbForCallstack : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GeneratePdbForCallstack() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GeneratePdbForCallstack() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GeneratePdbForCallstack(::grpc::ServerContext* /*context*/, const ::GeneratePdbForCallstackRequest* /*request*/, ::GeneratePdbForCallstackReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGeneratePdbForCallstack(::grpc::ServerContext* context, ::GeneratePdbForCallstackRequest* request, ::grpc::ServerAsyncResponseWriter< ::GeneratePdbForCallstackReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPdbPath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPdbPath() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetPdbPath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPdbPath(::grpc::ServerContext* /*context*/, const ::EmptyRequestReply* /*request*/, ::GetPdbPathReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPdbPath(::grpc::ServerContext* context, ::EmptyRequestReply* request, ::grpc::ServerAsyncResponseWriter< ::GetPdbPathReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ShouldUpdateSymbols : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ShouldUpdateSymbols() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ShouldUpdateSymbols() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShouldUpdateSymbols(::grpc::ServerContext* /*context*/, const ::EmptyRequestReply* /*request*/, ::ShouldUpdateSymbolsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShouldUpdateSymbols(::grpc::ServerContext* context, ::EmptyRequestReply* request, ::grpc::ServerAsyncResponseWriter< ::ShouldUpdateSymbolsReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Initialize<WithAsyncMethod_GetDecompiledModuleName<WithAsyncMethod_GeneratePdbForCallstack<WithAsyncMethod_GetPdbPath<WithAsyncMethod_ShouldUpdateSymbols<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Initialize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Initialize() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::EmptyRequestReply, ::EmptyRequestReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::EmptyRequestReply* request, ::EmptyRequestReply* response) { return this->Initialize(context, request, response); }));}
    void SetMessageAllocatorFor_Initialize(
        ::grpc::MessageAllocator< ::EmptyRequestReply, ::EmptyRequestReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::EmptyRequestReply, ::EmptyRequestReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Initialize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Initialize(::grpc::ServerContext* /*context*/, const ::EmptyRequestReply* /*request*/, ::EmptyRequestReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Initialize(
      ::grpc::CallbackServerContext* /*context*/, const ::EmptyRequestReply* /*request*/, ::EmptyRequestReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetDecompiledModuleName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetDecompiledModuleName() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::EmptyRequestReply, ::DecompiledModuleNameReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::EmptyRequestReply* request, ::DecompiledModuleNameReply* response) { return this->GetDecompiledModuleName(context, request, response); }));}
    void SetMessageAllocatorFor_GetDecompiledModuleName(
        ::grpc::MessageAllocator< ::EmptyRequestReply, ::DecompiledModuleNameReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::EmptyRequestReply, ::DecompiledModuleNameReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetDecompiledModuleName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDecompiledModuleName(::grpc::ServerContext* /*context*/, const ::EmptyRequestReply* /*request*/, ::DecompiledModuleNameReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDecompiledModuleName(
      ::grpc::CallbackServerContext* /*context*/, const ::EmptyRequestReply* /*request*/, ::DecompiledModuleNameReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GeneratePdbForCallstack : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GeneratePdbForCallstack() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::GeneratePdbForCallstackRequest, ::GeneratePdbForCallstackReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::GeneratePdbForCallstackRequest* request, ::GeneratePdbForCallstackReply* response) { return this->GeneratePdbForCallstack(context, request, response); }));}
    void SetMessageAllocatorFor_GeneratePdbForCallstack(
        ::grpc::MessageAllocator< ::GeneratePdbForCallstackRequest, ::GeneratePdbForCallstackReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::GeneratePdbForCallstackRequest, ::GeneratePdbForCallstackReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GeneratePdbForCallstack() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GeneratePdbForCallstack(::grpc::ServerContext* /*context*/, const ::GeneratePdbForCallstackRequest* /*request*/, ::GeneratePdbForCallstackReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GeneratePdbForCallstack(
      ::grpc::CallbackServerContext* /*context*/, const ::GeneratePdbForCallstackRequest* /*request*/, ::GeneratePdbForCallstackReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetPdbPath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetPdbPath() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::EmptyRequestReply, ::GetPdbPathReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::EmptyRequestReply* request, ::GetPdbPathReply* response) { return this->GetPdbPath(context, request, response); }));}
    void SetMessageAllocatorFor_GetPdbPath(
        ::grpc::MessageAllocator< ::EmptyRequestReply, ::GetPdbPathReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::EmptyRequestReply, ::GetPdbPathReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetPdbPath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPdbPath(::grpc::ServerContext* /*context*/, const ::EmptyRequestReply* /*request*/, ::GetPdbPathReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPdbPath(
      ::grpc::CallbackServerContext* /*context*/, const ::EmptyRequestReply* /*request*/, ::GetPdbPathReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ShouldUpdateSymbols : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ShouldUpdateSymbols() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::EmptyRequestReply, ::ShouldUpdateSymbolsReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::EmptyRequestReply* request, ::ShouldUpdateSymbolsReply* response) { return this->ShouldUpdateSymbols(context, request, response); }));}
    void SetMessageAllocatorFor_ShouldUpdateSymbols(
        ::grpc::MessageAllocator< ::EmptyRequestReply, ::ShouldUpdateSymbolsReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::EmptyRequestReply, ::ShouldUpdateSymbolsReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ShouldUpdateSymbols() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShouldUpdateSymbols(::grpc::ServerContext* /*context*/, const ::EmptyRequestReply* /*request*/, ::ShouldUpdateSymbolsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ShouldUpdateSymbols(
      ::grpc::CallbackServerContext* /*context*/, const ::EmptyRequestReply* /*request*/, ::ShouldUpdateSymbolsReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Initialize<WithCallbackMethod_GetDecompiledModuleName<WithCallbackMethod_GeneratePdbForCallstack<WithCallbackMethod_GetPdbPath<WithCallbackMethod_ShouldUpdateSymbols<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Initialize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Initialize() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Initialize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Initialize(::grpc::ServerContext* /*context*/, const ::EmptyRequestReply* /*request*/, ::EmptyRequestReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDecompiledModuleName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDecompiledModuleName() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetDecompiledModuleName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDecompiledModuleName(::grpc::ServerContext* /*context*/, const ::EmptyRequestReply* /*request*/, ::DecompiledModuleNameReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GeneratePdbForCallstack : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GeneratePdbForCallstack() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GeneratePdbForCallstack() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GeneratePdbForCallstack(::grpc::ServerContext* /*context*/, const ::GeneratePdbForCallstackRequest* /*request*/, ::GeneratePdbForCallstackReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPdbPath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPdbPath() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetPdbPath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPdbPath(::grpc::ServerContext* /*context*/, const ::EmptyRequestReply* /*request*/, ::GetPdbPathReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ShouldUpdateSymbols : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ShouldUpdateSymbols() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ShouldUpdateSymbols() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShouldUpdateSymbols(::grpc::ServerContext* /*context*/, const ::EmptyRequestReply* /*request*/, ::ShouldUpdateSymbolsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Initialize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Initialize() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Initialize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Initialize(::grpc::ServerContext* /*context*/, const ::EmptyRequestReply* /*request*/, ::EmptyRequestReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInitialize(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDecompiledModuleName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDecompiledModuleName() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetDecompiledModuleName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDecompiledModuleName(::grpc::ServerContext* /*context*/, const ::EmptyRequestReply* /*request*/, ::DecompiledModuleNameReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDecompiledModuleName(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GeneratePdbForCallstack : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GeneratePdbForCallstack() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GeneratePdbForCallstack() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GeneratePdbForCallstack(::grpc::ServerContext* /*context*/, const ::GeneratePdbForCallstackRequest* /*request*/, ::GeneratePdbForCallstackReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGeneratePdbForCallstack(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPdbPath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPdbPath() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetPdbPath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPdbPath(::grpc::ServerContext* /*context*/, const ::EmptyRequestReply* /*request*/, ::GetPdbPathReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPdbPath(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ShouldUpdateSymbols : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ShouldUpdateSymbols() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ShouldUpdateSymbols() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShouldUpdateSymbols(::grpc::ServerContext* /*context*/, const ::EmptyRequestReply* /*request*/, ::ShouldUpdateSymbolsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShouldUpdateSymbols(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Initialize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Initialize() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Initialize(context, request, response); }));
    }
    ~WithRawCallbackMethod_Initialize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Initialize(::grpc::ServerContext* /*context*/, const ::EmptyRequestReply* /*request*/, ::EmptyRequestReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Initialize(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetDecompiledModuleName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetDecompiledModuleName() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDecompiledModuleName(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetDecompiledModuleName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDecompiledModuleName(::grpc::ServerContext* /*context*/, const ::EmptyRequestReply* /*request*/, ::DecompiledModuleNameReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDecompiledModuleName(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GeneratePdbForCallstack : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GeneratePdbForCallstack() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GeneratePdbForCallstack(context, request, response); }));
    }
    ~WithRawCallbackMethod_GeneratePdbForCallstack() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GeneratePdbForCallstack(::grpc::ServerContext* /*context*/, const ::GeneratePdbForCallstackRequest* /*request*/, ::GeneratePdbForCallstackReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GeneratePdbForCallstack(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetPdbPath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetPdbPath() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPdbPath(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetPdbPath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPdbPath(::grpc::ServerContext* /*context*/, const ::EmptyRequestReply* /*request*/, ::GetPdbPathReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPdbPath(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ShouldUpdateSymbols : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ShouldUpdateSymbols() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ShouldUpdateSymbols(context, request, response); }));
    }
    ~WithRawCallbackMethod_ShouldUpdateSymbols() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShouldUpdateSymbols(::grpc::ServerContext* /*context*/, const ::EmptyRequestReply* /*request*/, ::ShouldUpdateSymbolsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ShouldUpdateSymbols(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Initialize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Initialize() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::EmptyRequestReply, ::EmptyRequestReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::EmptyRequestReply, ::EmptyRequestReply>* streamer) {
                       return this->StreamedInitialize(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Initialize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Initialize(::grpc::ServerContext* /*context*/, const ::EmptyRequestReply* /*request*/, ::EmptyRequestReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInitialize(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::EmptyRequestReply,::EmptyRequestReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDecompiledModuleName : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDecompiledModuleName() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::EmptyRequestReply, ::DecompiledModuleNameReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::EmptyRequestReply, ::DecompiledModuleNameReply>* streamer) {
                       return this->StreamedGetDecompiledModuleName(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDecompiledModuleName() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDecompiledModuleName(::grpc::ServerContext* /*context*/, const ::EmptyRequestReply* /*request*/, ::DecompiledModuleNameReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDecompiledModuleName(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::EmptyRequestReply,::DecompiledModuleNameReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GeneratePdbForCallstack : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GeneratePdbForCallstack() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::GeneratePdbForCallstackRequest, ::GeneratePdbForCallstackReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::GeneratePdbForCallstackRequest, ::GeneratePdbForCallstackReply>* streamer) {
                       return this->StreamedGeneratePdbForCallstack(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GeneratePdbForCallstack() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GeneratePdbForCallstack(::grpc::ServerContext* /*context*/, const ::GeneratePdbForCallstackRequest* /*request*/, ::GeneratePdbForCallstackReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGeneratePdbForCallstack(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GeneratePdbForCallstackRequest,::GeneratePdbForCallstackReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPdbPath : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPdbPath() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::EmptyRequestReply, ::GetPdbPathReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::EmptyRequestReply, ::GetPdbPathReply>* streamer) {
                       return this->StreamedGetPdbPath(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPdbPath() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPdbPath(::grpc::ServerContext* /*context*/, const ::EmptyRequestReply* /*request*/, ::GetPdbPathReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPdbPath(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::EmptyRequestReply,::GetPdbPathReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ShouldUpdateSymbols : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ShouldUpdateSymbols() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::EmptyRequestReply, ::ShouldUpdateSymbolsReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::EmptyRequestReply, ::ShouldUpdateSymbolsReply>* streamer) {
                       return this->StreamedShouldUpdateSymbols(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ShouldUpdateSymbols() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ShouldUpdateSymbols(::grpc::ServerContext* /*context*/, const ::EmptyRequestReply* /*request*/, ::ShouldUpdateSymbolsReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedShouldUpdateSymbols(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::EmptyRequestReply,::ShouldUpdateSymbolsReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Initialize<WithStreamedUnaryMethod_GetDecompiledModuleName<WithStreamedUnaryMethod_GeneratePdbForCallstack<WithStreamedUnaryMethod_GetPdbPath<WithStreamedUnaryMethod_ShouldUpdateSymbols<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Initialize<WithStreamedUnaryMethod_GetDecompiledModuleName<WithStreamedUnaryMethod_GeneratePdbForCallstack<WithStreamedUnaryMethod_GetPdbPath<WithStreamedUnaryMethod_ShouldUpdateSymbols<Service > > > > > StreamedService;
};


#endif  // GRPC_DecompilerSynchronizer_2eproto__INCLUDED
