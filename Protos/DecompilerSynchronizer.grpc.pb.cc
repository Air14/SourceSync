// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: DecompilerSynchronizer.proto

#include "DecompilerSynchronizer.pb.h"
#include "DecompilerSynchronizer.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>

static const char* DecompilerSynchronizer_method_names[] = {
  "/DecompilerSynchronizer/Initialize",
  "/DecompilerSynchronizer/GetDecompiledModuleName",
  "/DecompilerSynchronizer/GeneratePdbForCallstack",
  "/DecompilerSynchronizer/GetPdbPath",
  "/DecompilerSynchronizer/ShouldUpdateSymbols",
};

std::unique_ptr< DecompilerSynchronizer::Stub> DecompilerSynchronizer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DecompilerSynchronizer::Stub> stub(new DecompilerSynchronizer::Stub(channel, options));
  return stub;
}

DecompilerSynchronizer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Initialize_(DecompilerSynchronizer_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDecompiledModuleName_(DecompilerSynchronizer_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GeneratePdbForCallstack_(DecompilerSynchronizer_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPdbPath_(DecompilerSynchronizer_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ShouldUpdateSymbols_(DecompilerSynchronizer_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DecompilerSynchronizer::Stub::Initialize(::grpc::ClientContext* context, const ::EmptyRequestReply& request, ::EmptyRequestReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::EmptyRequestReply, ::EmptyRequestReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Initialize_, context, request, response);
}

void DecompilerSynchronizer::Stub::async::Initialize(::grpc::ClientContext* context, const ::EmptyRequestReply* request, ::EmptyRequestReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::EmptyRequestReply, ::EmptyRequestReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Initialize_, context, request, response, std::move(f));
}

void DecompilerSynchronizer::Stub::async::Initialize(::grpc::ClientContext* context, const ::EmptyRequestReply* request, ::EmptyRequestReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Initialize_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::EmptyRequestReply>* DecompilerSynchronizer::Stub::PrepareAsyncInitializeRaw(::grpc::ClientContext* context, const ::EmptyRequestReply& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::EmptyRequestReply, ::EmptyRequestReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Initialize_, context, request);
}

::grpc::ClientAsyncResponseReader< ::EmptyRequestReply>* DecompilerSynchronizer::Stub::AsyncInitializeRaw(::grpc::ClientContext* context, const ::EmptyRequestReply& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInitializeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DecompilerSynchronizer::Stub::GetDecompiledModuleName(::grpc::ClientContext* context, const ::EmptyRequestReply& request, ::DecompiledModuleNameReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::EmptyRequestReply, ::DecompiledModuleNameReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDecompiledModuleName_, context, request, response);
}

void DecompilerSynchronizer::Stub::async::GetDecompiledModuleName(::grpc::ClientContext* context, const ::EmptyRequestReply* request, ::DecompiledModuleNameReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::EmptyRequestReply, ::DecompiledModuleNameReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDecompiledModuleName_, context, request, response, std::move(f));
}

void DecompilerSynchronizer::Stub::async::GetDecompiledModuleName(::grpc::ClientContext* context, const ::EmptyRequestReply* request, ::DecompiledModuleNameReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDecompiledModuleName_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::DecompiledModuleNameReply>* DecompilerSynchronizer::Stub::PrepareAsyncGetDecompiledModuleNameRaw(::grpc::ClientContext* context, const ::EmptyRequestReply& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::DecompiledModuleNameReply, ::EmptyRequestReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDecompiledModuleName_, context, request);
}

::grpc::ClientAsyncResponseReader< ::DecompiledModuleNameReply>* DecompilerSynchronizer::Stub::AsyncGetDecompiledModuleNameRaw(::grpc::ClientContext* context, const ::EmptyRequestReply& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDecompiledModuleNameRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DecompilerSynchronizer::Stub::GeneratePdbForCallstack(::grpc::ClientContext* context, const ::GeneratePdbForCallstackRequest& request, ::GeneratePdbForCallstackReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::GeneratePdbForCallstackRequest, ::GeneratePdbForCallstackReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GeneratePdbForCallstack_, context, request, response);
}

void DecompilerSynchronizer::Stub::async::GeneratePdbForCallstack(::grpc::ClientContext* context, const ::GeneratePdbForCallstackRequest* request, ::GeneratePdbForCallstackReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::GeneratePdbForCallstackRequest, ::GeneratePdbForCallstackReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GeneratePdbForCallstack_, context, request, response, std::move(f));
}

void DecompilerSynchronizer::Stub::async::GeneratePdbForCallstack(::grpc::ClientContext* context, const ::GeneratePdbForCallstackRequest* request, ::GeneratePdbForCallstackReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GeneratePdbForCallstack_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GeneratePdbForCallstackReply>* DecompilerSynchronizer::Stub::PrepareAsyncGeneratePdbForCallstackRaw(::grpc::ClientContext* context, const ::GeneratePdbForCallstackRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::GeneratePdbForCallstackReply, ::GeneratePdbForCallstackRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GeneratePdbForCallstack_, context, request);
}

::grpc::ClientAsyncResponseReader< ::GeneratePdbForCallstackReply>* DecompilerSynchronizer::Stub::AsyncGeneratePdbForCallstackRaw(::grpc::ClientContext* context, const ::GeneratePdbForCallstackRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGeneratePdbForCallstackRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DecompilerSynchronizer::Stub::GetPdbPath(::grpc::ClientContext* context, const ::EmptyRequestReply& request, ::GetPdbPathReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::EmptyRequestReply, ::GetPdbPathReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPdbPath_, context, request, response);
}

void DecompilerSynchronizer::Stub::async::GetPdbPath(::grpc::ClientContext* context, const ::EmptyRequestReply* request, ::GetPdbPathReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::EmptyRequestReply, ::GetPdbPathReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPdbPath_, context, request, response, std::move(f));
}

void DecompilerSynchronizer::Stub::async::GetPdbPath(::grpc::ClientContext* context, const ::EmptyRequestReply* request, ::GetPdbPathReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPdbPath_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GetPdbPathReply>* DecompilerSynchronizer::Stub::PrepareAsyncGetPdbPathRaw(::grpc::ClientContext* context, const ::EmptyRequestReply& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::GetPdbPathReply, ::EmptyRequestReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPdbPath_, context, request);
}

::grpc::ClientAsyncResponseReader< ::GetPdbPathReply>* DecompilerSynchronizer::Stub::AsyncGetPdbPathRaw(::grpc::ClientContext* context, const ::EmptyRequestReply& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPdbPathRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DecompilerSynchronizer::Stub::ShouldUpdateSymbols(::grpc::ClientContext* context, const ::EmptyRequestReply& request, ::ShouldUpdateSymbolsReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::EmptyRequestReply, ::ShouldUpdateSymbolsReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ShouldUpdateSymbols_, context, request, response);
}

void DecompilerSynchronizer::Stub::async::ShouldUpdateSymbols(::grpc::ClientContext* context, const ::EmptyRequestReply* request, ::ShouldUpdateSymbolsReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::EmptyRequestReply, ::ShouldUpdateSymbolsReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ShouldUpdateSymbols_, context, request, response, std::move(f));
}

void DecompilerSynchronizer::Stub::async::ShouldUpdateSymbols(::grpc::ClientContext* context, const ::EmptyRequestReply* request, ::ShouldUpdateSymbolsReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ShouldUpdateSymbols_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ShouldUpdateSymbolsReply>* DecompilerSynchronizer::Stub::PrepareAsyncShouldUpdateSymbolsRaw(::grpc::ClientContext* context, const ::EmptyRequestReply& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ShouldUpdateSymbolsReply, ::EmptyRequestReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ShouldUpdateSymbols_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ShouldUpdateSymbolsReply>* DecompilerSynchronizer::Stub::AsyncShouldUpdateSymbolsRaw(::grpc::ClientContext* context, const ::EmptyRequestReply& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncShouldUpdateSymbolsRaw(context, request, cq);
  result->StartCall();
  return result;
}

DecompilerSynchronizer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DecompilerSynchronizer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DecompilerSynchronizer::Service, ::EmptyRequestReply, ::EmptyRequestReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DecompilerSynchronizer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::EmptyRequestReply* req,
             ::EmptyRequestReply* resp) {
               return service->Initialize(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DecompilerSynchronizer_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DecompilerSynchronizer::Service, ::EmptyRequestReply, ::DecompiledModuleNameReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DecompilerSynchronizer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::EmptyRequestReply* req,
             ::DecompiledModuleNameReply* resp) {
               return service->GetDecompiledModuleName(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DecompilerSynchronizer_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DecompilerSynchronizer::Service, ::GeneratePdbForCallstackRequest, ::GeneratePdbForCallstackReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DecompilerSynchronizer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GeneratePdbForCallstackRequest* req,
             ::GeneratePdbForCallstackReply* resp) {
               return service->GeneratePdbForCallstack(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DecompilerSynchronizer_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DecompilerSynchronizer::Service, ::EmptyRequestReply, ::GetPdbPathReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DecompilerSynchronizer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::EmptyRequestReply* req,
             ::GetPdbPathReply* resp) {
               return service->GetPdbPath(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DecompilerSynchronizer_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DecompilerSynchronizer::Service, ::EmptyRequestReply, ::ShouldUpdateSymbolsReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DecompilerSynchronizer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::EmptyRequestReply* req,
             ::ShouldUpdateSymbolsReply* resp) {
               return service->ShouldUpdateSymbols(ctx, req, resp);
             }, this)));
}

DecompilerSynchronizer::Service::~Service() {
}

::grpc::Status DecompilerSynchronizer::Service::Initialize(::grpc::ServerContext* context, const ::EmptyRequestReply* request, ::EmptyRequestReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DecompilerSynchronizer::Service::GetDecompiledModuleName(::grpc::ServerContext* context, const ::EmptyRequestReply* request, ::DecompiledModuleNameReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DecompilerSynchronizer::Service::GeneratePdbForCallstack(::grpc::ServerContext* context, const ::GeneratePdbForCallstackRequest* request, ::GeneratePdbForCallstackReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DecompilerSynchronizer::Service::GetPdbPath(::grpc::ServerContext* context, const ::EmptyRequestReply* request, ::GetPdbPathReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DecompilerSynchronizer::Service::ShouldUpdateSymbols(::grpc::ServerContext* context, const ::EmptyRequestReply* request, ::ShouldUpdateSymbolsReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


